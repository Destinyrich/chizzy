"use strict";
(self.webpackJsonp__wix_thunderbolt_app = self.webpackJsonp__wix_thunderbolt_app || []).push([[6121], {
    28123: function(e, i, t) {
        t.r(i),
        t.d(i, {
            AUTH_RESULT_REASON: function() {
                return w.$9
            },
            BIEvents: function() {
                return L
            },
            INTERACTIONS: function() {
                return w.SE
            },
            PrivacyStatus: function() {
                return ue.iY
            },
            PrivacyStatusStatus: function() {
                return f
            },
            Role: function() {
                return O
            },
            SiteMembersApiSymbol: function() {
                return D.n9
            },
            Status: function() {
                return I
            },
            isLoginAcceptableError: function() {
                return N.Y2
            },
            isSignupAcceptableError: function() {
                return N.fJ
            },
            memberDetailsFromDTO: function() {
                return N.Ky
            },
            page: function() {
                return ye
            },
            site: function() {
                return Ce
            }
        });
        var o = t(43757)
          , a = t(61049)
          , n = t(49574)
          , s = t(5096)
          , r = t(55048)
          , l = t(10666)
          , c = t(58629)
          , d = t(26513)
          , u = t(82627)
          , g = t(94315)
          , m = t(25954)
          , p = t(8562)
          , h = t(21511)
          , v = t(56405)
          , b = t(19238)
          , S = t(87821)
          , E = t(86305)
          , C = t(99552)
          , y = t(16684)
          , w = t(95848)
          , D = t(2811);
        class P {
            constructor(e, i, t, o, a) {
                this.propsStore = e,
                this.structureApi = i,
                this.siteScrollBlocker = t,
                this.browserWindow = o,
                this.cyclicTabbing = a
            }
            async displayDialog(e, i, t, o={}) {
                const a = async()=>{
                    (0,
                    p.yF)(this.browserWindow) || (this.activeElementBeforeShowDialog = this.browserWindow.document.activeElement);
                    const o = (0,
                    y.uniqueId)(D.rj);
                    this.propsStore.update({
                        [o]: Object.assign(Object.assign({}, i), t)
                    }),
                    this.currentCompId && this.cyclicTabbing.disableCyclicTabbing(this.currentCompId),
                    this.cyclicTabbing.enableCyclicTabbing(o),
                    await this.structureApi.addComponentToDynamicStructure(o, {
                        componentType: e,
                        components: []
                    }),
                    this.currentCompId && (this.structureApi.removeComponentFromDynamicStructure(this.currentCompId),
                    this.siteScrollBlocker.setSiteScrollingBlocked(!1, this.currentCompId)),
                    this.siteScrollBlocker.setSiteScrollingBlocked(!0, o),
                    this.currentCompId = o
                }
                  , {shouldWaitForAppDidMount: n, registerToAppDidMount: s} = o;
                n && s ? s(a) : await a()
            }
            hideDialog() {
                var e;
                this.currentCompId && (this.structureApi.removeComponentFromDynamicStructure(this.currentCompId),
                this.siteScrollBlocker.setSiteScrollingBlocked(!1, this.currentCompId),
                this.cyclicTabbing.disableCyclicTabbing(this.currentCompId)),
                this.currentCompId = void 0,
                (0,
                p.yF)(this.browserWindow) || (null === (e = this.activeElementBeforeShowDialog) || void 0 === e || e.focus(),
                this.activeElementBeforeShowDialog = null)
            }
        }
        var f, I, O;
        !function(e) {
            e.UNKNOWN = "UNKNOWN",
            e.PRIVATE = "PRIVATE",
            e.PUBLIC = "PUBLIC"
        }(f || (f = {})),
        function(e) {
            e.UNKNOWN = "UNKNOWN",
            e.PENDING = "PENDING",
            e.APPROVED = "APPROVED",
            e.BLOCKED = "BLOCKED",
            e.OFFLINE = "OFFLINE"
        }(I || (I = {})),
        function(e) {
            e.UNDEFINED_ROLE = "UNDEFINED_ROLE",
            e.MEMBER = "MEMBER",
            e.OWNER = "OWNER",
            e.CONTRIBUTOR = "CONTRIBUTOR"
        }(O || (O = {}));
        var N = t(43096)
          , A = t(42473)
          , T = t(86681);
        const L = ({sessionManager: e, businessLogger: i, wixBiSession: t, viewMode: o, language: a})=>{
            const n = (i,n)=>({
                biToken: t.msId,
                context: i,
                ts: R(t),
                viewmode: o,
                visitor_id: e.getVisitorId(),
                site_member_id: e.getSiteMemberId(),
                vsi: t.viewerSessionId,
                site_settings_lng: a.siteLanguage,
                browser_lng: a.userLanguage,
                lng_mismatch: a.siteLanguage !== a.userLanguage,
                layout: n
            });
            return {
                loginOrSignUpDialogLoaded: (e,t="fullscreen")=>{
                    i.logger.log(Object.assign({
                        src: 5,
                        evid: 658
                    }, n(e, t)), {
                        endpoint: "site-members"
                    })
                }
                ,
                closingDialog: (e,t="fullscreen")=>{
                    i.logger.log(Object.assign({
                        src: 5,
                        evid: 602,
                        form_type: "default"
                    }, n(e, t)), {
                        endpoint: "site-members"
                    })
                }
                ,
                emailAuthSubmitClicked: (e,t)=>{
                    i.logger.log(Object.assign({
                        src: 5,
                        evid: 603,
                        form_type: "default"
                    }, n(e, t)), {
                        endpoint: "site-members"
                    })
                }
                ,
                siteMembersFeatureLoaded: ()=>{
                    i.logger.log(Object.assign({
                        src: 5,
                        evid: 698
                    }, n()), {
                        endpoint: "site-members"
                    })
                }
                ,
                siteMembersSdkFeatureLoaded: ()=>{
                    i.logger.log(Object.assign({
                        src: 5,
                        evid: 699
                    }, n()), {
                        endpoint: "site-members"
                    })
                }
                ,
                siteMembersEmailConfirmationNewMembersModalLoad: ()=>{
                    i.logger.log(Object.assign({
                        src: 5,
                        evid: 1809
                    }, n()), {
                        endpoint: "site-members"
                    })
                }
                ,
                siteMembersEmailConfirmationSendCodeClick: ()=>{
                    i.logger.log(Object.assign({
                        src: 5,
                        evid: 1810
                    }, n()), {
                        endpoint: "site-members"
                    })
                }
                ,
                siteMembersEmailConfirmationOnResendCodeClick: ()=>{
                    i.logger.log(Object.assign({
                        src: 5,
                        evid: 1811
                    }, n()), {
                        endpoint: "site-members"
                    })
                }
            }
        }
          , R = e=>{
            const i = e.initialTimestamp || 0;
            return Date.now() - i
        }
          , _ = {
            isCloseable: !0,
            returnPages: !1
        };
        class k {
            constructor(e, i) {
                this.shouldRunCustomPopupCloseCallback = !0,
                this.popups = e,
                this.onReset = i,
                this.config = _
            }
            async openPopupPage(e, i) {
                var t;
                const o = this.shouldRunCustomPopupCloseCallback;
                this.preventCustomPopupCloseCallback(),
                await (null === (t = this.popups) || void 0 === t ? void 0 : t.open(e, (()=>{
                    this.shouldRunCustomPopupCloseCallback && (this.rejectAuthenticationRequest(),
                    i && i())
                }
                ))),
                this.shouldRunCustomPopupCloseCallback = o
            }
            preventCustomPopupCloseCallback() {
                this.shouldRunCustomPopupCloseCallback = !1
            }
            allowCustomPopupCloseCallback() {
                this.shouldRunCustomPopupCloseCallback = !0
            }
            assignRequestAuthenticationRejection(e) {
                this.requestAuthenticationRejectInstance = this.requestAuthenticationRejectInstance || e
            }
            assignRequestAuthenticationResolveInstance(e) {
                this.requestAuthenticationResolveInstance = this.requestAuthenticationResolveInstance || e
            }
            assignRequestAuthenticationPromise(e, i) {
                this.requestAuthenticationRejectInstance = this.requestAuthenticationRejectInstance || i,
                this.requestAuthenticationResolveInstance = this.requestAuthenticationResolveInstance || e
            }
            rejectAuthenticationRequest() {
                this.requestAuthenticationRejectInstance && (this.requestAuthenticationRejectInstance(w.$9.CANCELED),
                this.reset())
            }
            resolveAuthenticationRequest(e) {
                this.requestAuthenticationRejectInstance && (this.requestAuthenticationResolveInstance(e),
                this.reset())
            }
            setConfig({isCloseable: e=!0, returnPages: i=!1}) {
                this.config = {
                    isCloseable: e,
                    returnPages: i
                }
            }
            reset() {
                var e;
                null === (e = this.onReset) || void 0 === e || e.call(this),
                this.requestAuthenticationRejectInstance = void 0,
                this.requestAuthenticationResolveInstance = void 0,
                this.config = _
            }
        }
        var U, M, B, F, V, j, $ = t(48511), W = t(26034), x = {}, G = {
            memberPrivacySettings: "_memberPrivacySettings"
        }, q = {
            updatedDate: "google.protobuf.Timestamp"
        };
        function H(e) {
            return (0,
            $.Kk)(Object.assign(e, {
                domainToMappings: {
                    "editor.wixapps.net": [{
                        srcPath: "/_api/members/v1/privacy-settings",
                        destPath: "/v1/privacy-settings"
                    }],
                    "api._api_base_domain_": [{
                        srcPath: "/members/v1/privacy-settings",
                        destPath: ""
                    }],
                    "manage._base_domain_": [{
                        srcPath: "/_api/members/v1/privacy-settings",
                        destPath: "/v1/privacy-settings"
                    }],
                    "editor._base_domain_": [{
                        srcPath: "/_api/members/v1/privacy-settings",
                        destPath: "/v1/privacy-settings"
                    }],
                    "blocks._base_domain_": [{
                        srcPath: "/_api/members/v1/privacy-settings",
                        destPath: "/v1/privacy-settings"
                    }],
                    "create.editorx": [{
                        srcPath: "/_api/members/v1/privacy-settings",
                        destPath: "/v1/privacy-settings"
                    }],
                    "www.wixapis.com": [{
                        srcPath: "/members/v1/privacy-settings",
                        destPath: "/v1/privacy-settings"
                    }],
                    _: [{
                        srcPath: "/_api/members/v1/privacy-settings",
                        destPath: "/v1/privacy-settings"
                    }],
                    "www._base_domain_": [{
                        srcPath: "/_api/members/v1/privacy-settings",
                        destPath: "/v1/privacy-settings"
                    }],
                    "*.dev.wix-code.com": [{
                        srcPath: "/_api/members/v1/privacy-settings",
                        destPath: "/v1/privacy-settings"
                    }]
                }
            }))
        }
        !function(e) {
            e.UNKNOWN = "UNKNOWN",
            e.VISIBLE_TO_MEMBERS_ONLY = "VISIBLE_TO_MEMBERS_ONLY",
            e.VISIBLE_TO_ALL = "VISIBLE_TO_ALL"
        }(U || (U = {})),
        function(e) {
            e.UNKNOWN = "UNKNOWN",
            e.NO_ONE = "NO_ONE",
            e.ANYONE = "ANYONE"
        }(M || (M = {})),
        function(e) {
            e.UNKNOWN = "UNKNOWN",
            e.ENABLED = "ENABLED",
            e.DISABLED = "DISABLED",
            e.PENDING = "PENDING",
            e.DEMO = "DEMO"
        }(B || (B = {})),
        function(e) {
            e.OTHER = "OTHER",
            e.FROM_TEMPLATE = "FROM_TEMPLATE",
            e.DUPLICATE_BY_SITE_TRANSFER = "DUPLICATE_BY_SITE_TRANSFER",
            e.DUPLICATE = "DUPLICATE",
            e.OLD_SITE_TRANSFER = "OLD_SITE_TRANSFER",
            e.FLASH = "FLASH"
        }(F || (F = {})),
        function(e) {
            e.UNKNOWN_NAMESPACE = "UNKNOWN_NAMESPACE",
            e.WIX = "WIX",
            e.SHOUT_OUT = "SHOUT_OUT",
            e.ALBUMS = "ALBUMS",
            e.WIX_STORES_TEST_DRIVE = "WIX_STORES_TEST_DRIVE",
            e.HOTELS = "HOTELS",
            e.CLUBS = "CLUBS",
            e.ONBOARDING_DRAFT = "ONBOARDING_DRAFT",
            e.DEV_SITE = "DEV_SITE",
            e.LOGOS = "LOGOS",
            e.VIDEO_MAKER = "VIDEO_MAKER",
            e.PARTNER_DASHBOARD = "PARTNER_DASHBOARD",
            e.DEV_CENTER_COMPANY = "DEV_CENTER_COMPANY",
            e.HTML_DRAFT = "HTML_DRAFT",
            e.SITELESS_BUSINESS = "SITELESS_BUSINESS",
            e.CREATOR_ECONOMY = "CREATOR_ECONOMY",
            e.DASHBOARD_FIRST = "DASHBOARD_FIRST",
            e.ANYWHERE = "ANYWHERE",
            e.HEADLESS = "HEADLESS",
            e.ACCOUNT_MASTER_CMS = "ACCOUNT_MASTER_CMS"
        }(V || (V = {})),
        function(e) {
            e.UNKNOWN = "UNKNOWN",
            e.TRASH = "TRASH",
            e.DELETED = "DELETED",
            e.PENDING_PURGE = "PENDING_PURGE"
        }(j || (j = {}));
        const K = e=>{
            var i, t;
            const o = null === (i = e.joinCommunityCheckedByDefault) || void 0 === i || i
              , a = null !== (t = e.privacyNoteType) && void 0 !== t ? t : "CHECKBOX";
            return o ? a : "CHECKBOX"
        }
          , Y = e=>{
            var i;
            return "NOTE" === K(e) || (null === (i = e.joinCommunityCheckedByDefault) || void 0 === i || i)
        }
          , z = async(e,i)=>{
            const {data: t} = await e.request(function(e) {
                var i = (0,
                W.G)(x, {})
                  , t = i.toJSON
                  , o = i.fromJSON
                  , a = (0,
                W.G)(G, {
                    _memberPrivacySettings: q
                }).fromJSON;
                function n(i) {
                    var o = i.host
                      , n = t(e);
                    return {
                        entityFqdn: "wix.members.v1.member_privacy_settings",
                        method: "GET",
                        methodFqn: "com.wixpress.members.memberprivacysettings.MemberPrivacySettingsService.GetMemberPrivacySettings",
                        url: H({
                            protoPath: "/v1/privacy-settings",
                            data: n,
                            host: o
                        }),
                        params: (0,
                        $.kI)(n),
                        transformResponse: a
                    }
                }
                return n.fromReq = o,
                n
            }({}), {
                signedInstance: i
            });
            return t.memberPrivacySettings
        }
          , J = {
            [I.APPROVED]: "ACTIVE",
            [I.PENDING]: "PENDING"
        }
          , X = e=>{
            var i;
            return e && null !== (i = J[e]) && void 0 !== i ? i : "APPLICANT"
        }
        ;
        var Q = t(52306)
          , Z = {
            value: "_customValue"
        }
          , ee = {
            numValue: "DOUBLE",
            dateValue: "google.protobuf.Timestamp",
            listValue: "_listValue",
            mapValue: "_mapValue"
        }
          , ie = {
            createdDate: "google.protobuf.Timestamp",
            updatedDate: "google.protobuf.Timestamp",
            identityProfile: "_identityProfile"
        }
          , te = {
            customFields: "_customField"
        }
          , oe = {
            value: "_customValue"
        }
          , ae = {}
          , ne = {
            identity: "_identity",
            additionalData: "Map#_customValue"
        }
          , se = {
            value: "Map#_customValue"
        }
          , re = {
            identity: "_identity"
        };
        function le(e) {
            return (0,
            $.Kk)(Object.assign(e, {
                domainToMappings: {
                    _: [{
                        srcPath: "/_api/iam/authentication",
                        destPath: ""
                    }],
                    "users._base_domain_": [{
                        srcPath: "/iam/wix/google",
                        destPath: "/v1/sso/callback/root/0e6a50f5-b523-4e29-990d-f37fa2ffdd69"
                    }, {
                        srcPath: "/authentication",
                        destPath: ""
                    }],
                    "www.wixapis.com": [{
                        srcPath: "/_api/iam/authentication",
                        destPath: ""
                    }],
                    "bo._base_domain_": [{
                        srcPath: "/_api/iam/authentication",
                        destPath: ""
                    }],
                    "dev._base_domain_": [{
                        srcPath: "/_api/iam/authentication",
                        destPath: ""
                    }],
                    "manage._base_domain_": [{
                        srcPath: "/_api/authentication",
                        destPath: ""
                    }],
                    "www._base_domain_": [{
                        srcPath: "/_api/iam/authentication",
                        destPath: ""
                    }]
                }
            }))
        }
        function ce(e) {
            var i = (0,
            W.G)(re, {
                _customField: Z,
                _customValue: ee,
                _identity: ie,
                _identityProfile: te,
                _listValue: oe,
                _mapValue: se
            })
              , t = i.toJSON
              , o = i.fromJSON
              , a = (0,
            W.G)(ne, {
                _customField: Z,
                _customValue: ee,
                _identity: ie,
                _identityProfile: te,
                _listValue: oe,
                _mapValue: se
            }).fromJSON;
            function n(i) {
                var o = i.host
                  , n = t(e);
                return {
                    entityFqdn: "wix.iam.authentication.v1.authentication",
                    method: "POST",
                    methodFqn: "wix.iam.authentication.v1.AuthenticationService.Register",
                    url: le({
                        protoPath: "/v1/register",
                        data: n,
                        host: o
                    }),
                    data: n,
                    transformResponse: a
                }
            }
            return n.fromReq = o,
            n
        }
        function de(e) {
            var i = (0,
            W.G)(ae, {})
              , t = i.toJSON
              , o = i.fromJSON
              , a = (0,
            W.G)(ne, {
                _customField: Z,
                _customValue: ee,
                _identity: ie,
                _identityProfile: te,
                _listValue: oe,
                _mapValue: se
            }).fromJSON;
            function n(i) {
                var o = i.host
                  , n = t(e);
                return {
                    entityFqdn: "wix.iam.authentication.v1.authentication",
                    method: "POST",
                    methodFqn: "wix.iam.authentication.v1.AuthenticationService.Login",
                    url: le({
                        protoPath: "/v1/login",
                        data: n,
                        host: o
                    }),
                    data: n,
                    transformResponse: a
                }
            }
            return n.fromReq = o,
            n
        }
        ce.__isAmbassador = !0,
        de.__isAmbassador = !0;
        var ue = t(74880);
        const ge = (e,i,t)=>{
            document.cookie = `${e}=;max-age=0`,
            document.cookie = `${e}=;max-age=0;path=${i}`,
            document.cookie = `${e}=;domain=${t};max-age=0`,
            document.cookie = `${e}=;domain=${t};max-age=0;path=${i}`
        }
          , me = (0,
        o.ff)([(0,
        o.t6)(a.R9, D.u2), (0,
        o.t6)(a.jC, D.u2), (0,
        o.t6)(a.Wf, D.u2), (0,
        o.t6)(a.z8, D.u2), n.U, s.EE, s.Zr, v.Xb, r.xP, r.QZ, s.bk, s.ZQ, b.F0, (0,
        o.jt)(S.x), b.Iz, l.$, c.sK, (0,
        o.jt)(E.cC), (0,
        o.jt)(C.I), d.jj, u.O, (0,
        o.jt)(g.C), (0,
        o.jt)(T.a), (0,
        o.jt)(A.I)], ((e,i,t,o,a,n,s,r,l,c,d,u,g,v,b,S,E,C,D={
            trackEvent: ()=>0
        },f,I,A,T,R)=>{
            var _, U, B, F;
            const V = (0,
            m.O)()
              , {loginSocialBarOnSite: j, collectionExposure: $, protectedHomepage: W, smSessionCookie: x, memberInfoAppId: G, smcollectionId: q, isTemplate: H} = e;
            let {sm_efCookie: J} = e;
            const Z = "WixInternal" === $
              , ee = "22bef345-3c5b-4c18-b782-74d4085112ff"
              , ie = r.getUserSession();
            let te = r.getAppInstanceByAppDefId(ee);
            const oe = ()=>(0,
            N.OP)(r)
              , {smSettings: ae, tpaApplicationIds: ne, policyLinks: se, translations: re} = i
              , le = G && ne[G]
              , {metaSiteId: me, externalBaseUrl: pe, siteId: he, siteRevision: ve} = s.site
              , be = s.requestUrl
              , Se = s.viewMode
              , Ee = null !== (U = null === (_ = s.anywhereConfig) || void 0 === _ ? void 0 : _.siteId) && void 0 !== U ? U : he
              , Ce = null !== (F = null === (B = s.anywhereConfig) || void 0 === B ? void 0 : B.revision) && void 0 !== F ? F : ve
              , ye = -1 !== w.F0.findIndex((e=>{
                var i, t;
                return null === (t = null === (i = null == u ? void 0 : u.navigator) || void 0 === i ? void 0 : i.userAgent) || void 0 === t ? void 0 : t.includes(e)
            }
            ))
              , we = !ye
              , De = !ye
              , Pe = `/_api/wix-sm-webapp/tokens/verify/${me}/${Ee}`
              , fe = `${pe.replace(/\/$/, "")}/api/wix-sm/v1/authorize/${Ee}/pages`
              , Ie = `/_api/wix-sm-webapp/tokens/logout/${me}`
              , Oe = `/_api/wix-sm-webapp/member/changePasswordWithMailToken?metaSiteId=${me}&collectionId=${q}`
              , Ne = `/_api/wix-sm-webapp/social/token/handle?metaSiteId=${me}&collectionId=${q}`
              , Ae = ae.smFirstDialogLogin ? "login" : "signup"
              , {socialLoginFacebookEnabled: Te, socialLoginGoogleEnabled: Le, termsOfUse: Re, privacyPolicy: _e, codeOfConduct: ke, customSignUpPageId: Ue, customSignInPageId: Me} = ae
              , {privacyNoteType: Be, joinCommunityCheckedByDefault: Fe} = ((e,i)=>{
                var t;
                return i["specs.thunderbolt.enableSignUpPrivacyNoteType"] ? {
                    privacyNoteType: K(e),
                    joinCommunityCheckedByDefault: Y(e)
                } : {
                    privacyNoteType: "CHECKBOX",
                    joinCommunityCheckedByDefault: null === (t = e.joinCommunityCheckedByDefault) || void 0 === t || t
                }
            }
            )(ae, I);
            let {smToken: Ve} = e
              , je = {}
              , $e = x
              , We = null
              , xe = !1;
            const Ge = e=>{
                We = e
            }
              , qe = ()=>({
                registerToAppDidMount: Ge,
                shouldWaitForAppDidMount: !xe
            })
              , He = async()=>{
                var e;
                if (I["specs.thunderbolt.getMemberDetailsFromMembersNg"]) {
                    const {member: i} = await Xe("/_api/members/v1/members/my?fieldsets=FULL", {
                        headers: {
                            authorization: null !== (e = r.getAppInstanceByAppDefId(ee)) && void 0 !== e ? e : ""
                        }
                    })
                      , {role: t} = await (0,
                    N.Xh)((()=>{
                        var e;
                        return Xe(`/api/wix-sm/v1/members/${null == i ? void 0 : i.id}/role`, {
                            headers: {
                                authorization: null !== (e = r.getAppInstanceByAppDefId(ee)) && void 0 !== e ? e : ""
                            }
                        })
                    }
                    ), (()=>({
                        role: O.MEMBER
                    })));
                    return (({member: e, role: i})=>{
                        var t, o, a, n, s, r, l, c, d, u, g, m, p, h, v, b, S, E, C, y, w;
                        return {
                            id: null !== (t = null == e ? void 0 : e.id) && void 0 !== t ? t : "",
                            contactId: null !== (o = null == e ? void 0 : e.contactId) && void 0 !== o ? o : "",
                            loginEmail: null !== (a = null == e ? void 0 : e.loginEmail) && void 0 !== a ? a : "",
                            imageUrl: null !== (r = null === (s = null === (n = null == e ? void 0 : e.profile) || void 0 === n ? void 0 : n.photo) || void 0 === s ? void 0 : s.url) && void 0 !== r ? r : "",
                            nickname: null !== (c = null === (l = null == e ? void 0 : e.profile) || void 0 === l ? void 0 : l.nickname) && void 0 !== c ? c : "",
                            profilePrivacyStatus: null !== (d = null == e ? void 0 : e.privacyStatus) && void 0 !== d ? d : "",
                            slug: null !== (g = null === (u = null == e ? void 0 : e.profile) || void 0 === u ? void 0 : u.slug) && void 0 !== g ? g : "",
                            status: X(null == e ? void 0 : e.status),
                            creationDate: null !== (m = null == e ? void 0 : e.createdDate) && void 0 !== m ? m : "",
                            lastUpdateDate: null !== (p = null == e ? void 0 : e.updatedDate) && void 0 !== p ? p : "",
                            lastLoginDate: null !== (h = null == e ? void 0 : e.lastLoginDate) && void 0 !== h ? h : "",
                            emailVerified: null !== (v = null == e ? void 0 : e.loginEmailVerified) && void 0 !== v && v,
                            role: null != i ? i : "MEMBER",
                            owner: i === O.OWNER,
                            firstName: null !== (S = null === (b = null == e ? void 0 : e.contact) || void 0 === b ? void 0 : b.firstName) && void 0 !== S ? S : "",
                            lastName: null !== (C = null === (E = null == e ? void 0 : e.contact) || void 0 === E ? void 0 : E.lastName) && void 0 !== C ? C : "",
                            memberName: `${null === (y = null == e ? void 0 : e.contact) || void 0 === y ? void 0 : y.firstName} ${null === (w = null == e ? void 0 : e.contact) || void 0 === w ? void 0 : w.lastName}`,
                            groups: void 0,
                            emails: void 0,
                            phones: void 0,
                            addresses: void 0,
                            labels: void 0,
                            customFields: void 0
                        }
                    }
                    )({
                        member: i,
                        role: t
                    })
                }
                const i = `/_api/wix-sm-webapp/member/${Ve}?collectionId=${q}&metaSiteId=${me}`
                  , {payload: t} = await Xe(i);
                return (0,
                N.Ky)(t)
            }
              , Ke = {}
              , Ye = {}
              , ze = L({
                sessionManager: r,
                businessLogger: S,
                wixBiSession: E,
                viewMode: null == Se ? void 0 : Se.toUpperCase(),
                language: d
            });
            ze.siteMembersFeatureLoaded();
            const Je = {}
              , Xe = (0,
            N.Qn)(a, {
                credentials: "same-origin",
                headers: {
                    accept: "application/json",
                    "x-wix-site-revision": `${Ce}`,
                    "x-wix-client-artifact-id": "thunderbolt"
                }
            }, be)
              , Qe = (0,
            Q.d)({
                isSSR: !1
            })
              , Ze = ((e,i)=>{
                let t;
                return {
                    canHavePublicMembers: async()=>t || (t = new Promise((async t=>{
                        const o = await z(e, i());
                        t((null == o ? void 0 : o.publicMemberCandidates) === M.ANYONE)
                    }
                    )),
                    t)
                }
            }
            )(Qe, (()=>null != te ? te : ""))
              , ei = ((e,i,t)=>{
                const {isCommunityInstalled: o} = i;
                return {
                    canHavePublicCommunity: async()=>t["specs.thunderbolt.shouldUseMemberPrivacySettingsService"] ? e.canHavePublicMembers() : o
                }
            }
            )(Ze, e, I)
              , ii = ((e,i,t,o,a)=>new P(e,i,t,o,a))(l, c, v, u, T)
              , ti = new URL(be).searchParams.get("clientId")
              , oi = ((e,i,t,o,a,n)=>{
                let s, r;
                const l = "/_serverless/collection-settings-facade/get-settings"
                  , c = async()=>r || e(n ? `${l}?clientId=${n}` : l, {
                    headers: {
                        "Content-Type": "application/json",
                        authorization: a || ""
                    }
                }).then((e=>(r = e,
                r)))
                  , d = async()=>o["specs.thunderbolt.useIAMEnabledConnections"] ? c().then((e=>e.collectionSettings)) : s || e("/_api/wix-sm-webapp/v1/collection/settings", {
                    headers: {
                        "Content-Type": "application/json",
                        authorization: a || ""
                    }
                }).then((e=>e.settings)).then((e=>(s = e,
                e)));
                return {
                    getSiteMembersSettings: d,
                    getCaptchaSettings: ()=>d().then(N.B_).catch((e=>(i.captureError(e, {
                        tags: {
                            feature: "site-members"
                        }
                    }),
                    t.trackEvent((0,
                    w.RN)(w.eE.ACTIONS.SETTINGS.FAIL)),
                    {
                        invisible: {
                            login: !1,
                            signup: !1
                        },
                        visible: {
                            login: !1,
                            signup: !0
                        }
                    }))),
                    getEnabledConnections: ()=>c().then((e=>{
                        var i;
                        return null !== (i = e.enabledConnections) && void 0 !== i ? i : []
                    }
                    )),
                    getLoginRedirectUrl: ()=>c().then((e=>e.loginUrl))
                }
            }
            )(Xe, n, D, I, te, ti || void 0)
              , ai = (0,
            N.eL)(u)
              , ni = (0,
            N.kY)(u, V)
              , si = new k(C,(async()=>{
                const e = await oi.getCaptchaSettings();
                (e.invisible.login || e.invisible.signup) && ni.hideCaptchaBadge()
            }
            ))
              , ri = null == R ? void 0 : R.getBsi()
              , li = ri ? ri.split("|")[0] : "00000000-0000-0000-0000-000000000000"
              , ci = e=>{
                n.interactionStarted(w.SE.SOCIAL_APP_LOGIN_WITH_VENDOR(e))
            }
              , di = {
                appDidMount() {
                    We && We(),
                    xe = !0
                },
                async login(e, i, t, o=!1, a, n=!1, s) {
                    var r, l, c, d, u, g, m, p, h, v, b;
                    try {
                        const s = await oi.getCaptchaSettings();
                        if (s.visible.login && !(null == t ? void 0 : t.recaptchaToken) && !(null == a ? void 0 : a.otp) && !(null == a ? void 0 : a.verificationId))
                            throw w.Xu;
                        D.trackEvent((0,
                        w.RN)(w.eE.ACTIONS.LOGIN.SUBMIT));
                        const r = await di.performLogin(e, i, n, s, t, a)
                          , l = await di.handleLoginResponse(r, o);
                        return D.trackEvent((0,
                        w.RN)(w.eE.ACTIONS.LOGIN.SUCCESS)),
                        l
                    } catch (a) {
                        if ((0,
                        N.Y2)(a) || D.trackEvent({
                            eventName: "CustomEvent",
                            params: {
                                eventCategory: "Site members",
                                eventAction: "Log in Failure",
                                eventLabel: "Wix"
                            }
                        }),
                        (null === (l = null === (r = null == a ? void 0 : a.details) || void 0 === r ? void 0 : r.applicationError) || void 0 === l ? void 0 : l.code) === w.O1.WAITING_APPROVAL && di.showAdminApprovalDialog(e),
                        (0,
                        N.yQ)(a)) {
                            const r = null === (u = null === (d = null === (c = null == a ? void 0 : a.details) || void 0 === c ? void 0 : c.applicationError) || void 0 === d ? void 0 : d.data) || void 0 === u ? void 0 : u.verificationId
                              , l = null !== (h = null === (p = null === (m = null === (g = null == a ? void 0 : a.details) || void 0 === g ? void 0 : g.applicationError) || void 0 === m ? void 0 : m.data) || void 0 === p ? void 0 : p.verificationFailureReason) && void 0 !== h ? h : null === (b = null === (v = null == a ? void 0 : a.details) || void 0 === v ? void 0 : v.applicationError) || void 0 === b ? void 0 : b.code
                              , S = {
                                email: e,
                                verificationId: r,
                                error: l
                            };
                            return di.showVerificationCodeDialog(S).then((a=>{
                                const r = {
                                    verificationId: null == S ? void 0 : S.verificationId,
                                    otp: a
                                };
                                return di.login(e, i, t, o, r, n, s).catch((e=>{
                                    throw n && di.showLoginDialog(s, e),
                                    e
                                }
                                ))
                            }
                            )).then((e=>(ii.hideDialog(),
                            e)))
                        }
                        throw a
                    }
                },
                async performLogin(e, i, t, o, a, n) {
                    var s;
                    const r = null == C ? void 0 : C.getCurrentLightboxId()
                      , l = null === (s = f.getCurrentRouteInfo()) || void 0 === s ? void 0 : s.pageId
                      , c = t || Me && r && Me === r || Me && l && Me === l
                      , d = o.invisible.login && c ? await ai(w.Ly.LOGIN) : void 0;
                    return (0,
                    N.gb)(!!I["specs.thunderbolt.useIAMPlatform"], (async()=>{
                        var t, o;
                        const n = [];
                        (null == a ? void 0 : a.recaptchaToken) && n.push({
                            Recaptcha: null == a ? void 0 : a.recaptchaToken
                        }),
                        d && n.push({
                            InvisibleRecaptcha: d
                        });
                        const s = {
                            identifier: {
                                email: e
                            },
                            inputs: {
                                password: i
                            },
                            captcha_tokens: n
                        }
                          , r = I["specs.thunderbolt.iamOverAmbassador"] ? await Qe.request(de(s), {
                            signedInstance: te || ""
                        }).then((e=>e.data)) : await Xe("/_api/iam/authentication/v1/login", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                authorization: te || ""
                            },
                            body: JSON.stringify(s)
                        });
                        return {
                            member: (0,
                            N.T2)(r),
                            token: r.sessionToken,
                            pages: (0,
                            N.AC)(null === (t = r.additionalData) || void 0 === t ? void 0 : t.protectedPages),
                            status: null === (o = null == r ? void 0 : r.state) || void 0 === o ? void 0 : o.status
                        }
                    }
                    ), (async()=>{
                        var t;
                        const o = await Xe("/_api/wix-sm-webapp/v1/auth/login", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                authorization: te || ""
                            },
                            body: JSON.stringify({
                                email: e,
                                password: i,
                                recaptchaToken: null == a ? void 0 : a.recaptchaToken,
                                invisibleRecaptchaToken: d,
                                emailVerification: n
                            })
                        });
                        return {
                            member: o.member,
                            token: null === (t = null == o ? void 0 : o.session) || void 0 === t ? void 0 : t.token
                        }
                    }
                    ))
                },
                async handleOauthToken(e, i, t, o, a=!1) {
                    const s = r.getVisitorId();
                    n.interactionStarted(w.SE.SOCIAL_APP_LOGIN),
                    D.trackEvent((0,
                    w.RN)(w.eE.ACTIONS.LOGIN.SUBMIT, i));
                    try {
                        const {payload: r} = await Xe(Ne, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify({
                                svSession: ie,
                                visitorId: s,
                                token: e,
                                provider: i,
                                mode: t,
                                lang: d.userLanguage,
                                privacyStatus: o
                            })
                        });
                        let l, c;
                        n.interactionEnded(w.SE.SOCIAL_APP_LOGIN),
                        n.interactionEnded(w.SE.SOCIAL_APP_LOGIN_WITH_VENDOR(i)),
                        r.smSession && (c = r.smSession.siteMemberDto,
                        l = r.smSession.sessionToken),
                        c = r.siteMemberDto;
                        const g = (0,
                        N.Ky)(c);
                        (0,
                        N.kS)(u, be, {});
                        const m = await di.handleLoginResponse({
                            member: g,
                            token: l
                        }, a);
                        return D.trackEvent((0,
                        w.RN)(w.eE.ACTIONS.LOGIN.SUCCESS, i)),
                        m
                    } catch (e) {
                        throw D.trackEvent((0,
                        w.RN)(w.eE.ACTIONS.LOGIN.FAIL, i)),
                        e
                    }
                },
                async handleSocialLoginResponse(e, i, t=!1) {
                    var o;
                    const a = null !== (o = w.KG[i]) && void 0 !== o ? o : i;
                    n.interactionStarted(w.SE.SOCIAL_APP_LOGIN),
                    n.interactionEnded(w.SE.SOCIAL_APP_LOGIN),
                    n.interactionEnded(w.SE.SOCIAL_APP_LOGIN_WITH_VENDOR(a)),
                    D.trackEvent((0,
                    w.RN)(w.eE.ACTIONS.LOGIN.SUBMIT, a));
                    const s = (0,
                    N.yL)(e);
                    (0,
                    N.kS)(u, be, {});
                    const r = await di.handleLoginResponse(s, t);
                    return D.trackEvent((0,
                    w.RN)(w.eE.ACTIONS.LOGIN.SUCCESS, a)),
                    r
                },
                async handleLoginResponse({token: e, member: i, pages: t, status: o}, a=!1) {
                    const n = i.emailVerified;
                    if (!e && !n && "ACTIVE" === i.status)
                        return di.showConfirmationEmailDialog(i.id);
                    if (!e || "REQUIRE_OWNER_APPROVAL" === o)
                        return di.showAdminApprovalDialog(i.loginEmail);
                    (0,
                    N.kS)(u, be, {
                        sessionToken: e
                    });
                    const s = await di.applySessionToken(e, i, a && !t, !!t)
                      , r = null != t ? t : s;
                    return Object.assign({
                        sessionToken: e,
                        member: i
                    }, a ? {
                        pages: r
                    } : {})
                },
                async promptLogin(e, i, t) {
                    var o, a, n, s;
                    void 0 === e && (e = {}),
                    void 0 === i && (i = null === (a = null === (o = si.config) || void 0 === o ? void 0 : o.isCloseable) || void 0 === a || a),
                    void 0 === t && (t = null !== (s = null === (n = si.config) || void 0 === n ? void 0 : n.returnPages) && void 0 !== s && s);
                    const {mode: r, modal: l} = e
                      , c = "login" === (null != r ? r : Ae)
                      , u = l ? "popup" : "fullscreen";
                    return H ? (await di.showNotificationDialog(re.templateNotificationTitle, re.templateNotificationMessage, re.containerOk),
                    Promise.reject(w.$9.CANCELED)) : (ni.loadScript(d.userLanguage, w.mz),
                    c ? di.showLoginDialog({
                        isCloseable: i,
                        displayMode: u,
                        returnPages: t
                    }) : di.showSignUpDialog({
                        isCloseable: i,
                        displayMode: u,
                        returnPages: t
                    }))
                },
                promptForgotPassword(e=!0) {
                    return new Promise(((i,t)=>{
                        si.assignRequestAuthenticationPromise(i, t);
                        const o = {
                            isCloseable: e,
                            directionByLanguage: d.directionByLanguage,
                            translations: re
                        }
                          , a = {
                            async onCloseDialogCallback() {
                                (0,
                                N.CY)(be, u),
                                ze.closingDialog("RequestResetPassword"),
                                ii.hideDialog(),
                                si.rejectAuthenticationRequest()
                            },
                            onSubmitCallback(e) {
                                return di.sendForgotPasswordMail(e).then((async()=>{
                                    const e = ()=>{
                                        (0,
                                        N.CY)(be, u),
                                        si.resolveAuthenticationRequest(),
                                        t(w.$9.CANCELED)
                                    }
                                    ;
                                    di.showNotificationDialog(re.resetPasswordCheckEmailTitle, re.resetPasswordCheckEmailText, re.resetPasswordOk, e, e)
                                }
                                ))
                            }
                        }
                          , n = qe();
                        ii.displayDialog("RequestPasswordResetDialog", o, a, n)
                    }
                    ))
                },
                async requestAuthentication(e={}) {
                    if ($e)
                        return {
                            success: !0,
                            token: $e,
                            reason: w.$9.ALREADY_LOGGED_IN
                        };
                    try {
                        const i = !W
                          , {sessionToken: t} = await di.promptLogin(e, i);
                        return {
                            success: !0,
                            token: t,
                            reason: w.$9.SUCCESS
                        }
                    } catch (e) {
                        return {
                            success: !1,
                            reason: e
                        }
                    }
                },
                async requestAuthorizedPages(e={}) {
                    if (Ve) {
                        return {
                            success: !0,
                            pages: await di.authorizeMemberPagesBySignedInstance(Ve)
                        }
                    }
                    try {
                        const i = !W;
                        si.setConfig({
                            isCloseable: i,
                            returnPages: !0
                        });
                        const t = await di.promptLogin(e, i, !0);
                        return si.reset(),
                        {
                            success: !0,
                            pages: t.pages
                        }
                    } catch (e) {
                        return {
                            success: !1,
                            reason: e
                        }
                    }
                },
                async applySessionToken(e, i, t=!1, a=!1) {
                    n.interactionStarted(w.SE.VERIFY_TOKEN);
                    const s = await (a ? Xe(`/_api/iam/cookie/v1/createSessionCookie?sessionToken=${e}`, {
                        method: "GET",
                        headers: {
                            authorization: te || ""
                        }
                    }) : Xe(Pe, {
                        method: "POST",
                        body: `token=${e}`
                    }));
                    var l;
                    if (n.interactionEnded(w.SE.VERIFY_TOKEN),
                    await r.loadNewSession({
                        reason: "memberLogin"
                    }),
                    te = r.getAppInstanceByAppDefId(ee),
                    Ve = r.getSmToken(),
                    $e = e,
                    je = null != i ? i : await di.getMemberDetails(),
                    await (l = je,
                    Promise.all(Object.entries(Ke).map((async([e,i])=>{
                        try {
                            if ("$$$timeout$$$" === await Promise.race([i(l), (0,
                            N._v)(3e3).then((()=>"$$$timeout$$$"))]))
                                throw new Error(`callback ${e} timed out`)
                        } catch (e) {
                            n.captureError(e, {
                                tags: {
                                    feature: "site-members"
                                }
                            })
                        }
                    }
                    )))),
                    o.export({
                        memberDetails: je
                    }),
                    t)
                        return s.payload.pages
                },
                async authorizeMemberPagesByCookie() {
                    const e = (0,
                    p.yF)(u) ? {
                        headers: {
                            cookie: `smSession=${x}`
                        }
                    } : void 0
                      , {authorizedPages: i} = await Xe(fe, e);
                    return i
                },
                async authorizeMemberPagesByToken(e) {
                    if (e === x)
                        return this.authorizeMemberPagesByCookie();
                    const {payload: i} = await Xe(Pe, {
                        method: "POST",
                        body: `token=${e}`
                    })
                      , {pages: t} = i;
                    return t
                },
                async authorizeMemberPagesBySignedInstance(e) {
                    const i = {
                        headers: {
                            authorization: e
                        }
                    }
                      , {authorizedPages: t} = await Xe(fe, i);
                    return t
                },
                async getMemberDetails(e=!1) {
                    return je.id && !e ? je : Ve ? (je = await He(),
                    o.export({
                        memberDetails: je
                    }),
                    e && await (i = je,
                    Promise.all(Object.values(Je).map((async e=>{
                        try {
                            await e(i)
                        } catch (e) {
                            n.captureError(e, {
                                tags: {
                                    feature: "site-members"
                                }
                            })
                        }
                    }
                    )))),
                    je) : null;
                    var i
                },
                async register(e, i, t, o, a, s, r, l, c) {
                    var d, g, m, p, h, v, b, S, E, y;
                    s = null != s && s;
                    try {
                        const c = await oi.getCaptchaSettings();
                        if (c.visible.signup && "Enabled" !== I["specs.ShouldPassCaptchaVerificationOnSignupSpec"] && !r && !(null == l ? void 0 : l.otp) && !(null == l ? void 0 : l.verificationId))
                            throw w.Xu;
                        n.interactionStarted(w.SE.CODE_SIGNUP),
                        D.trackEvent((0,
                        w.RN)(w.eE.ACTIONS.SIGNUP.SUBMIT));
                        const g = null == C ? void 0 : C.getCurrentLightboxId()
                          , m = null === (d = f.getCurrentRouteInfo()) || void 0 === d ? void 0 : d.pageId
                          , p = a || Ue && g && Ue === g || Ue && m && Ue === m
                          , h = c.invisible.signup && p ? await ai(w.Ly.SIGNUP) : void 0
                          , {member: v, sessionToken: b, pages: S, status: E} = await di.performRegister(e, i, {
                            contactInfo: t,
                            profilePrivacyStatus: o,
                            isDefaultFlow: a,
                            recaptchaToken: r,
                            invisibleRecaptchaToken: h,
                            emailVerification: l
                        })
                          , y = v.emailVerified
                          , P = "ACTIVE" === (null == v ? void 0 : v.status) ? "ACTIVE" : "PENDING";
                        if (!b && !y && "ACTIVE" === v.status)
                            return n.interactionEnded(w.SE.CODE_SIGNUP),
                            di.showConfirmationEmailDialog(v.id);
                        if (a && "APPLICANT" === (null == v ? void 0 : v.status) || !b || "REQUIRE_OWNER_APPROVAL" === E)
                            return n.interactionEnded(w.SE.CODE_SIGNUP),
                            di.showAdminApprovalDialog(e);
                        (0,
                        N.kS)(u, be, {
                            sessionToken: b
                        });
                        const O = await di.applySessionToken(b, v, s && !S, !!S)
                          , A = null != S ? S : O;
                        return n.interactionEnded(w.SE.CODE_SIGNUP),
                        D.trackEvent((0,
                        w.RN)(w.eE.ACTIONS.SIGNUP.SUCCESS)),
                        D.trackEvent({
                            eventName: "CompleteRegistration",
                            params: {
                                origin: "Site members",
                                method: "Wix"
                            }
                        }),
                        Object.assign({
                            member: v,
                            status: P,
                            sessionToken: b
                        }, s && A ? {
                            pages: A
                        } : {})
                    } catch (l) {
                        if ((0,
                        N.yQ)(l)) {
                            const n = await oi.getSiteMembersSettings()
                              , d = null === (p = null === (m = null === (g = null == l ? void 0 : l.details) || void 0 === g ? void 0 : g.applicationError) || void 0 === m ? void 0 : m.data) || void 0 === p ? void 0 : p.verificationId
                              , u = null !== (S = null === (b = null === (v = null === (h = null == l ? void 0 : l.details) || void 0 === h ? void 0 : h.applicationError) || void 0 === v ? void 0 : v.data) || void 0 === b ? void 0 : b.verificationFailureReason) && void 0 !== S ? S : null === (y = null === (E = null == l ? void 0 : l.details) || void 0 === E ? void 0 : E.applicationError) || void 0 === y ? void 0 : y.code
                              , C = {
                                email: e,
                                verificationId: d,
                                error: u
                            };
                            return di.showVerificationCodeDialog(C).then((l=>{
                                const d = {
                                    verificationId: null == C ? void 0 : C.verificationId,
                                    otp: l
                                };
                                return "DURING_SIGNUP" !== n.emailVerificationOption ? di.login(e, i, {
                                    recaptchaToken: r
                                }, s, d, a).then((e=>{
                                    var i;
                                    const t = "ACTIVE" === (null === (i = null == e ? void 0 : e.member) || void 0 === i ? void 0 : i.status) ? "ACTIVE" : "PENDING";
                                    return Object.assign(Object.assign({}, e), {
                                        status: t
                                    })
                                }
                                ), (e=>{
                                    throw a && di.showLoginDialog(c, e),
                                    e
                                }
                                )) : di.register(e, i, t, o, a, s, r, d, c).catch((e=>{
                                    throw a && di.showSignUpDialog(c, e),
                                    e
                                }
                                ))
                            }
                            )).then((e=>(ii.hideDialog(),
                            e)))
                        }
                        throw (0,
                        N.fJ)(l) ? n.interactionEnded(w.SE.CODE_SIGNUP) : D.trackEvent((0,
                        w.RN)(w.eE.ACTIONS.SIGNUP.FAIL)),
                        l
                    }
                },
                async performRegister(e, i, {contactInfo: t, profilePrivacyStatus: o, isDefaultFlow: a, recaptchaToken: n, invisibleRecaptchaToken: s, emailVerification: r}={}) {
                    return (0,
                    N.gb)(!!I["specs.thunderbolt.useIAMPlatform"], (async()=>{
                        var a, r;
                        const l = {
                            identity: {
                                identifiers: [{
                                    email: e
                                }],
                                identityProfile: Object.assign(Object.assign({}, (0,
                                N.AO)(t || {})), {
                                    privacyStatus: o
                                })
                            },
                            inputs: {
                                password: i
                            },
                            captcha_tokens: [...n ? [{
                                Recaptcha: n
                            }] : [], ...s ? [{
                                InvisibleRecaptcha: s
                            }] : []]
                        }
                          , c = I["specs.thunderbolt.iamOverAmbassador"] ? await Qe.request(ce(l), {
                            signedInstance: te || ""
                        }).then((e=>e.data)) : await Xe("/_api/iam/authentication/v1/register", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                authorization: te || ""
                            },
                            body: JSON.stringify(l)
                        });
                        return {
                            member: (0,
                            N.T2)(c),
                            sessionToken: c.sessionToken,
                            pages: (0,
                            N.AC)(null === (a = c.additionalData) || void 0 === a ? void 0 : a.protectedPages),
                            status: null === (r = null == c ? void 0 : c.state) || void 0 === r ? void 0 : r.status
                        }
                    }
                    ), (async()=>{
                        const l = {
                            email: e,
                            password: i,
                            profilePrivacyStatus: o,
                            contactInfo: (0,
                            N.t1)(t || {}),
                            defaultFlow: a,
                            recaptchaToken: n,
                            invisibleRecaptchaToken: s,
                            emailVerification: r
                        }
                          , {member: c, session: d} = await Xe("/_api/wix-sm-webapp/v1/auth/signup", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                authorization: te || ""
                            },
                            body: JSON.stringify(l)
                        });
                        return {
                            member: c,
                            sessionToken: null == d ? void 0 : d.token
                        }
                    }
                    ))
                },
                async sendForgotPasswordMail(e) {
                    n.interactionStarted(w.SE.RESET_PASSWORD);
                    const i = d.userLanguage
                      , t = encodeURIComponent(be)
                      , o = encodeURIComponent(e)
                      , a = I["specs.thunderbolt.iamResetPasswordFlow"] ? "/_api/iam/recovery/v1/send-email" : "/_api/wix-sm-webapp/member/sendForgotPasswordMail"
                      , s = I["specs.thunderbolt.iamResetPasswordFlow"] ? JSON.stringify({
                        language: i,
                        email: e,
                        redirect: {
                            url: be
                        }
                    }) : `returnUrl=${t}&collectionId=${q}&metaSiteId=${me}&lang=${i}&email=${o}`
                      , r = I["specs.thunderbolt.iamResetPasswordFlow"] ? {
                        "Content-Type": "application/json",
                        authorization: te || ""
                    } : void 0;
                    await Xe(a, {
                        headers: r,
                        method: "POST",
                        body: s
                    }),
                    n.interactionEnded(w.SE.RESET_PASSWORD)
                },
                async sendSetPasswordEmail(e, i) {
                    const t = await Xe("/_api/wix-sm-webapp/members/v1/auth/members/send-set-password-email", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            authorization: te || ""
                        },
                        body: JSON.stringify(Object.assign({
                            email: e
                        }, (null == i ? void 0 : i.hideIgnoreMessage) ? {
                            hideIgnoreMessage: i.hideIgnoreMessage
                        } : {}))
                    });
                    return !!(null == t ? void 0 : t.accepted)
                },
                async changePassword(e, i) {
                    const t = encodeURIComponent(e)
                      , o = i.startsWith(w.nc)
                      , a = o ? "/_api/iam/recovery/v1/recover" : Oe
                      , n = o ? JSON.stringify({
                        password: e,
                        recovery_token: i
                    }) : `newPassword=${t}&forgotPasswordToken=${i}`
                      , s = o ? {
                        "Content-Type": "application/json",
                        authorization: te || ""
                    } : void 0;
                    await Xe(a, {
                        method: "POST",
                        headers: s,
                        body: n
                    })
                },
                async resendEmailVerification(e) {
                    await Xe(`/_api/wix-sm-webapp/tokens/email/resend/${e}`)
                },
                async logout(e) {
                    if (Ve) {
                        if (await Xe(Ie, {
                            method: "POST"
                        }).catch((()=>{
                            D.trackEvent((0,
                            w.RN)(w.eE.ACTIONS.LOGOUT.FAIL))
                        }
                        )),
                        await Promise.all(Object.entries(Ye).map((async([e,i])=>{
                            try {
                                if ("$$$timeout$$$" === await Promise.race([i(), (0,
                                N._v)(3e3).then((()=>"$$$timeout$$$"))]))
                                    throw new Error(`callback ${e} timed out`)
                            } catch (e) {
                                n.captureError(e, {
                                    tags: {
                                        feature: "site-members"
                                    }
                                })
                            }
                        }
                        ))),
                        e) {
                            const i = `./${e.replace(/^\//, "")}`;
                            await g.navigate(i)
                        }
                        (0,
                        p.yF)(u) || u.document.location.reload()
                    }
                },
                registerToUserLogin(e, i=(0,
                y.uniqueId)("callback")) {
                    return Ke[i] = e,
                    i
                },
                unRegisterToUserLogin(e) {
                    delete Ke[e]
                },
                registerToMemberLogout(e) {
                    const i = (0,
                    y.uniqueId)("logout_callback");
                    return Ye[i] = e,
                    i
                },
                unRegisterToMemberLogout(e) {
                    delete Ye[e]
                },
                registerToMemberDetailsRefresh(e) {
                    const i = (0,
                    y.uniqueId)("mdrcb");
                    return Je[i] = e,
                    i
                },
                unRegisterToMemberDetailsRefresh(e) {
                    delete Je[e]
                },
                async showWelcomeDialog(e=!0) {
                    const i = {
                        isCloseable: e,
                        translations: re
                    }
                      , t = b.getParsedUrl()
                      , o = {
                        onCloseDialogCallback() {
                            (0,
                            N.CY)(be, u),
                            ze.closingDialog("WelcomeDialog");
                            const e = new URL(be).hostname
                              , i = 0 === e.indexOf("www") ? e.substr(3) : e;
                            ge("sm_ef", "/", i),
                            J = "",
                            ii.hideDialog(),
                            g.navigate(t.href)
                        },
                        onSubmitCallback() {
                            const e = new URL(be).hostname
                              , i = 0 === e.indexOf("www") ? e.substr(3) : e;
                            ge("sm_ef", "/", i),
                            J = "",
                            ii.hideDialog(),
                            le && g.navigate("./account/my-account"),
                            g.navigate(t.href)
                        }
                    };
                    n.interactionStarted(w.SE.WELCOME_DIALOG),
                    n.interactionEnded(w.SE.WELCOME_DIALOG),
                    ii.displayDialog("WelcomeDialog", i, o)
                },
                async showNoPermissionsToPageDialog(e) {
                    const i = {
                        onCloseDialogCallback() {
                            (0,
                            N.CY)(be, u),
                            ii.hideDialog(),
                            e && e()
                        },
                        onSwitchAccountLinkClick() {
                            di.logout()
                        }
                    };
                    ii.displayDialog("NoPermissionsToPageDialog", {
                        translations: re
                    }, i)
                },
                async showResetPasswordDialog(e) {
                    const i = {
                        isCloseable: !0,
                        isTermsOfUseNeeded: !(!(null == Re ? void 0 : Re.enabled) || !se.termsOfUse),
                        isPrivacyPolicyNeeded: !(!(null == _e ? void 0 : _e.enabled) || !se.privacyPolicy),
                        termsOfUseLink: se.termsOfUse,
                        privacyPolicyLink: se.privacyPolicy,
                        directionByLanguage: d.directionByLanguage,
                        translations: re
                    }
                      , t = ()=>{
                        const e = b.getParsedUrl();
                        return e.searchParams.delete("forgotPasswordToken"),
                        e.searchParams.delete("forgotPasswordLang"),
                        b.pushUrlState(e),
                        e
                    }
                      , o = {
                        onCloseDialogCallback() {
                            (0,
                            N.CY)(be, u),
                            ze.closingDialog("ResetPasswordDialog");
                            const e = t();
                            ii.hideDialog(),
                            g.navigate(e.href)
                        },
                        async onSubmitCallback(o) {
                            try {
                                await di.changePassword(o, e),
                                di.showNotificationDialog(re.resetPasswordSuccessTitle, "", re.containerOk, (async()=>{
                                    if (e.startsWith(w.nc)) {
                                        const e = new URL(be).searchParams.get("redirectUrl");
                                        if (e)
                                            return null == u ? void 0 : u.location.replace(e)
                                    }
                                    const i = t();
                                    await di.showLoginDialog(),
                                    g.navigate(i.href)
                                }
                                ))
                            } catch (e) {
                                const t = (0,
                                N.zg)(e).toString();
                                if (t !== w.O1.RESET_PASSWORD_TOKEN_EXPIRED && t !== w.O1.NEW_RESET_PASSWORD_TOKEN_EXPIRED)
                                    throw e;
                                di.showNotificationDialog(re.passwordHasExpiredTitle, re.passwordHasExpiredText, re.passwordHasExpiredOk, (()=>di.promptForgotPassword(i.isCloseable).then((()=>{
                                    const e = b.getParsedUrl();
                                    g.navigate(e.href)
                                }
                                ))))
                            }
                        }
                    };
                    ii.displayDialog("ResetPasswordDialog", i, o, qe())
                },
                async showLoggedInResetPasswordDialog() {
                    const e = {
                        isCloseable: !0,
                        directionByLanguage: d.directionByLanguage,
                        translations: re
                    }
                      , i = {
                        onCloseDialogCallback() {
                            ze.closingDialog("LoggedInResetPasswordDialog"),
                            ii.hideDialog()
                        },
                        async onSubmitCallback() {}
                    };
                    ii.displayDialog("LoggedInResetPasswordDialog", e, i, qe())
                },
                async showLoginDialog(e={}, i) {
                    const {returnPages: t, isCloseable: o, displayMode: a} = Object.assign({
                        isCloseable: !0,
                        displayMode: "fullscreen",
                        returnPages: !1
                    }, e)
                      , s = await oi.getCaptchaSettings();
                    return ni.setCaptchaBadgeVisibility(s.invisible.login),
                    Me && (null == C ? void 0 : C.isLightbox(Me)) ? di.showCustomAuthenticationDialog(Me, t) : new Promise((async(r,l)=>{
                        si.assignRequestAuthenticationPromise(r, l);
                        const c = "Enabled" === I["specs.ShouldForceCaptchaVerificationOnLoginSpec"] || s.visible.login
                          , [g,m] = (0,
                        y.partition)(await di.getConnections(), {
                            appDefId: w.Ld.PASSWORD
                        })
                          , p = await di.getLoginUrl()
                          , v = {
                            bsi: li,
                            displayMode: a,
                            language: d.userLanguage,
                            directionByLanguage: d.directionByLanguage,
                            isCloseable: o,
                            smCollectionId: q,
                            svSession: ie,
                            biVisitorId: oe(),
                            metaSiteId: me,
                            isEmailLoginEnabled: g.length > 0,
                            idps: m,
                            shouldForceCaptchaVerification: !s.invisible.login && c,
                            isSocialAuthSupported: we,
                            serverError: i,
                            reportBi: S.reportBi,
                            translations: re,
                            externalBaseUrl: di.getExternalBaseUrl(),
                            loginUrl: p
                        }
                          , b = {
                            onCloseDialogCallback() {
                                (0,
                                N.CY)(be, u),
                                ii.hideDialog(),
                                ze.closingDialog("MemberLoginDialog", a),
                                si.rejectAuthenticationRequest()
                            },
                            submit(i, o, s) {
                                return n.interactionStarted(w.SE.DEFAULT_LOGIN),
                                ze.emailAuthSubmitClicked("MemberLoginDialog", a),
                                di.login(i, o, s, t, void 0, !0, e).then((e=>{
                                    n.interactionEnded(w.SE.DEFAULT_LOGIN),
                                    ii.hideDialog(),
                                    r(e)
                                }
                                )).catch((e=>{
                                    throw (0,
                                    N.Y2)(e) && n.interactionEnded(w.SE.DEFAULT_LOGIN),
                                    e
                                }
                                ))
                            },
                            onForgetYourPasswordClick() {
                                di.promptForgotPassword(o)
                            },
                            onSwitchDialogLinkClick() {
                                di.showSignUpDialog({
                                    isCloseable: o,
                                    displayMode: a,
                                    returnPages: t
                                }).then(r, (()=>{
                                    si.rejectAuthenticationRequest()
                                }
                                ))
                            },
                            async onTokenMessage(e, i, o=!1) {
                                let a;
                                return await ei.canHavePublicCommunity() && (a = o ? "PUBLIC" : "PRIVATE"),
                                di.handleOauthToken(e, i, "memberLoginDialog", a, t).then((e=>{
                                    ii.hideDialog(),
                                    r(e)
                                }
                                ))
                            },
                            onBackendSocialLogin(e, i) {
                                return di.handleSocialLoginResponse(e, i, t).then((e=>{
                                    ii.hideDialog(),
                                    r(e)
                                }
                                ))
                            },
                            getHostReadyPayload: ()=>({
                                visitorId: oe(),
                                svSession: ie
                            }),
                            openCaptcha: (0,
                            h.yT)({
                                captcha: A,
                                userLanguage: d.userLanguage
                            }),
                            reportSocialAuthStarted: ci
                        };
                        ze.loginOrSignUpDialogLoaded("MemberLoginDialog", a),
                        await ii.displayDialog("MemberLoginDialog", v, b, qe()),
                        di.closeCustomAuthenticationDialogs(!0)
                    }
                    ))
                },
                async showSignUpDialog(e={}, i) {
                    const {returnPages: t, isCloseable: o, displayMode: a} = Object.assign({
                        isCloseable: !0,
                        displayMode: "fullscreen",
                        returnPages: !1
                    }, e)
                      , s = await oi.getCaptchaSettings();
                    if (ni.setCaptchaBadgeVisibility(s.invisible.signup),
                    Ue && (null == C ? void 0 : C.isLightbox(Ue)))
                        return di.showCustomAuthenticationDialog(Ue, t);
                    const r = "Enabled" !== I["specs.ShouldPassCaptchaVerificationOnSignupSpec"] && "Enabled" === I["specs.ShouldForceCaptchaVerificationOnSignupSpec"];
                    return new Promise((async(l,c)=>{
                        const g = r || s.visible.signup && "Enabled" !== I["specs.ShouldPassCaptchaVerificationOnSignupSpec"]
                          , [m,p] = (0,
                        y.partition)(await di.getConnections(), {
                            appDefId: w.Ld.PASSWORD
                        })
                          , v = await di.getLoginUrl();
                        si.assignRequestAuthenticationPromise(l, c);
                        const b = {
                            bsi: li,
                            displayMode: a,
                            language: d.userLanguage,
                            directionByLanguage: d.directionByLanguage,
                            isCloseable: o,
                            smCollectionId: q,
                            biVisitorId: oe(),
                            svSession: ie,
                            metaSiteId: me,
                            isSocialAuthSupported: we,
                            isEmailLoginEnabled: m.length > 0,
                            idps: p,
                            isCommunityInstalled: await ei.canHavePublicCommunity(),
                            privacyNoteType: Be,
                            joinCommunityCheckedByDefault: Fe,
                            isTermsOfUseNeeded: !(!(null == Re ? void 0 : Re.enabled) || !se.termsOfUse),
                            isPrivacyPolicyNeeded: !(!(null == _e ? void 0 : _e.enabled) || !se.privacyPolicy),
                            isCodeOfConductNeeded: !(!(null == ke ? void 0 : ke.enabled) || !se.codeOfConduct),
                            shouldForceCaptchaVerification: !s.invisible.signup && g,
                            termsOfUseLink: se.termsOfUse,
                            privacyPolicyLink: se.privacyPolicy,
                            codeOfConductLink: se.codeOfConduct,
                            serverError: i,
                            reportBi: S.reportBi,
                            translations: re,
                            externalBaseUrl: di.getExternalBaseUrl(),
                            loginUrl: v
                        }
                          , E = {
                            onCloseDialogCallback() {
                                (0,
                                N.CY)(be, u),
                                ii.hideDialog(),
                                ze.closingDialog("SignUpDialog", a),
                                si.rejectAuthenticationRequest()
                            },
                            async submit(i, o, s) {
                                let r;
                                if (await ei.canHavePublicCommunity()) {
                                    r = ("boolean" == typeof s ? s : s.isCommunityChecked) ? ue.iY.PUBLIC : ue.iY.PRIVATE
                                }
                                const c = "boolean" == typeof s || null == s ? void 0 : s.recaptchaToken;
                                return n.interactionStarted(w.SE.DEFAULT_SIGNUP),
                                ze.emailAuthSubmitClicked("SignUpDialog", a),
                                di.register(i, o, void 0, r, !0, t, c, void 0, e).then((e=>{
                                    n.interactionEnded(w.SE.DEFAULT_SIGNUP);
                                    const {member: i, sessionToken: o, pages: a} = e;
                                    o && (ii.hideDialog(),
                                    l(Object.assign({
                                        member: i,
                                        sessionToken: o
                                    }, t ? {
                                        pages: a
                                    } : {})))
                                }
                                )).catch((e=>{
                                    throw (0,
                                    N.fJ)(e) && n.interactionEnded(w.SE.DEFAULT_SIGNUP),
                                    e
                                }
                                ))
                            },
                            onSwitchDialogLinkClick() {
                                di.showLoginDialog({
                                    isCloseable: o,
                                    displayMode: a,
                                    returnPages: t
                                }).then(l, (()=>{
                                    si.rejectAuthenticationRequest()
                                }
                                ))
                            },
                            async onTokenMessage(e, i, o=!1) {
                                let a;
                                return await ei.canHavePublicCommunity() && (a = o ? "PUBLIC" : "PRIVATE"),
                                di.handleOauthToken(e, i, "memberLoginDialog", a, t).then((e=>{
                                    ii.hideDialog(),
                                    l(e)
                                }
                                ))
                            },
                            onBackendSocialLogin(e, i) {
                                return di.handleSocialLoginResponse(e, i, t).then((e=>{
                                    ii.hideDialog(),
                                    l(e)
                                }
                                ))
                            },
                            getHostReadyPayload: ()=>({
                                visitorId: oe(),
                                svSession: ie
                            }),
                            openCaptcha: (0,
                            h.yT)({
                                captcha: A,
                                userLanguage: d.userLanguage
                            }),
                            reportSocialAuthStarted: ci
                        };
                        ze.loginOrSignUpDialogLoaded("SignUpDialog", a),
                        await ii.displayDialog("SignUpDialog", b, E, qe()),
                        di.closeCustomAuthenticationDialogs(!0)
                    }
                    ))
                },
                async hideAuthDialog() {
                    console.warn("hideAuthDialog is not supported")
                },
                async showNotificationDialog(e, i, t, o=(()=>0), a=(()=>0)) {
                    const n = {
                        isCloseable: !0,
                        title: e,
                        description: i,
                        okButtonText: t,
                        translations: re
                    }
                      , s = {
                        onCloseDialogCallback() {
                            (0,
                            N.CY)(be, u),
                            ze.closingDialog("NotificationDialog"),
                            ii.hideDialog(),
                            a()
                        },
                        onOkButtonClick() {
                            ii.hideDialog(),
                            o()
                        }
                    };
                    await ii.displayDialog("NotificationDialog", n, s)
                },
                async showConfirmationEmailDialog(e, i=!0) {
                    return new Promise(((t,o)=>{
                        const a = {
                            isCloseable: !0,
                            isSignUp: i,
                            translations: re
                        }
                          , n = {
                            onCloseDialogCallback() {
                                (0,
                                N.CY)(be, u),
                                ze.closingDialog("ConfirmationEmailDialog"),
                                ii.hideDialog(),
                                si.rejectAuthenticationRequest(),
                                o(w.$9.CANCELED)
                            },
                            async onResendConfirmationEmail() {
                                await di.resendEmailVerification(e),
                                await di.showConfirmationEmailDialog(e, !1).catch(o)
                            }
                        };
                        ii.displayDialog("ConfirmationEmailDialog", a, n)
                    }
                    ))
                },
                async showAdminApprovalDialog(e) {
                    return new Promise(((i,t)=>{
                        const o = ()=>{
                            (0,
                            N.kS)(u, be, {
                                error: N.nA.ACCESS_DENIED
                            }),
                            si.rejectAuthenticationRequest(),
                            t(w.$9.CANCELED)
                        }
                        ;
                        di.showNotificationDialog("", `${re.applySuccess1} ${re.applySuccess2}`.replace("{0}", e), re.containerOk, o, o)
                    }
                    ))
                },
                async showCustomAuthenticationDialog(e, i=!1) {
                    if (!C)
                        throw new Error("popup unavailable");
                    return new Promise((async(t,o)=>{
                        si.assignRequestAuthenticationPromise(t, o);
                        const a = di.registerToUserLogin((async()=>{
                            si.resolveAuthenticationRequest(Object.assign({
                                member: je,
                                sessionToken: $e
                            }, i ? {
                                pages: await di.authorizeMemberPagesBySignedInstance(Ve)
                            } : {})),
                            di.unRegisterToUserLogin(a),
                            C.getCurrentLightboxId() === e && C.close()
                        }
                        ), "customAuthCbId");
                        await si.openPopupPage(e, (()=>{
                            di.unRegisterToUserLogin(a)
                        }
                        )),
                        ii.hideDialog()
                    }
                    ))
                },
                async closeCustomAuthenticationDialogs(e=!1) {
                    const i = null == C ? void 0 : C.getCurrentLightboxId();
                    i && [Ue, Me].includes(i) && (e && si.preventCustomPopupCloseCallback(),
                    await C.close(),
                    si.allowCustomPopupCloseCallback())
                },
                getForgotPasswordToken() {
                    return new URL((0,
                    p.yF)(u) ? be : u.location.href).searchParams.get("forgotPasswordToken")
                },
                shouldDisplayWelcomeDialog() {
                    return J && le
                },
                async showVerificationCodeDialog(e) {
                    return new Promise((async(i,t)=>{
                        var o, a;
                        n.interactionStarted(w.SE.VERIFICATION_CODE),
                        ze.siteMembersEmailConfirmationNewMembersModalLoad(),
                        si.assignRequestAuthenticationPromise(i, t);
                        const s = {
                            language: d.userLanguage,
                            directionByLanguage: d.directionByLanguage,
                            isCloseable: null === (a = null === (o = si.config) || void 0 === o ? void 0 : o.isCloseable) || void 0 === a || a,
                            displayMode: "customPopup",
                            email: null == e ? void 0 : e.email,
                            error: null == e ? void 0 : e.error,
                            translations: re
                        }
                          , r = {
                            onResendVerificationCodeEmail() {
                                ze.siteMembersEmailConfirmationOnResendCodeClick(),
                                i(null)
                            },
                            onCloseDialogCallback() {
                                ze.closingDialog("VerificationCode"),
                                (0,
                                N.CY)(be, u),
                                ii.hideDialog(),
                                si.rejectAuthenticationRequest(),
                                t(w.$9.CANCELED)
                            },
                            onSubmitCallback(e) {
                                ze.siteMembersEmailConfirmationSendCodeClick(),
                                i(e)
                            }
                        };
                        n.interactionEnded(w.SE.VERIFICATION_CODE),
                        ii.displayDialog("VerificationCodeDialog", s, r)
                    }
                    ))
                },
                async appWillMount() {
                    j && await di.getMemberDetails();
                    switch (new URL(s.requestUrl).searchParams.get("showDialog")) {
                    case "MemberLoginDialog":
                        di.showLoginDialog();
                        break;
                    case "SignUpDialog":
                        di.showSignUpDialog();
                        break;
                    case "RequestPasswordResetDialog":
                        di.promptForgotPassword();
                        break;
                    case "ResetPasswordDialog":
                        di.showResetPasswordDialog("faketoken");
                        break;
                    case "LoggedInResetPasswordDialog":
                        di.showLoggedInResetPasswordDialog();
                        break;
                    case "WelcomeDialog":
                        di.showWelcomeDialog();
                        break;
                    case "NoPermissionsToPageDialog":
                        di.showNoPermissionsToPageDialog();
                        break;
                    case "NotificationDialog":
                        di.showNotificationDialog("title", "description", "ok");
                        break;
                    case "ConfirmationEmailDialog":
                        di.showConfirmationEmailDialog("fakemember");
                        break;
                    case "VerificationCodeDialog":
                        di.showVerificationCodeDialog({
                            email: "testEmail@test.com"
                        })
                    }
                },
                pageWillUnmount({pageId: e}) {
                    [Ue, Me].includes(e) || ii.hideDialog()
                },
                getSocialAuthComponentProps() {
                    return (0,
                    N.IO)({
                        config: e,
                        viewerModel: s,
                        sessionManager: r,
                        bsiManager: R,
                        handleOauthToken: di.handleOauthToken,
                        handleSocialLoginResponse: di.handleSocialLoginResponse,
                        isSocialAuthSupported: De,
                        captcha: A,
                        userLanguage: d.userLanguage,
                        reportBi: S.reportBi,
                        reportSocialAuthStarted: ci,
                        useNewSocialFlow: !!I["specs.thunderbolt.ShouldUseNewIAMSocialFlow"],
                        translations: re
                    })
                },
                async getConnections() {
                    if (I["specs.thunderbolt.useIAMEnabledConnections"])
                        return oi.getEnabledConnections().then((e=>e.map((({id: e, appDefId: i, displayName: t})=>({
                            id: e,
                            appDefId: i,
                            name: t
                        })))));
                    const e = new URL(be).searchParams.get("idpConnectionId");
                    return [...Z ? [] : [{
                        id: w.Ld.PASSWORD,
                        appDefId: w.Ld.PASSWORD,
                        name: "Password"
                    }], ...Le ? [{
                        id: w.Ld.GOOGLE,
                        appDefId: w.Ld.GOOGLE,
                        name: "Google"
                    }] : [], ...Te && !Z ? [{
                        id: w.Ld.FACEBOOK,
                        appDefId: w.Ld.FACEBOOK,
                        name: "Facebook"
                    }] : [], ...e ? [{
                        id: e,
                        appDefId: e,
                        name: "SSO"
                    }] : []]
                },
                getLoginUrl() {
                    if (ti && I["specs.thunderbolt.shouldFetchLoginUrlByClientId"])
                        return oi.getLoginRedirectUrl()
                },
                getExternalBaseUrl() {
                    return I["specs.thunderbolt.shouldUseExternalBaseUrl"] ? pe : void 0
                }
            };
            return o.export({
                promptLogin: di.promptLogin,
                logout: di.logout,
                memberDetails: je
            }),
            t.update((()=>({
                shouldShowRenderingBlockingDialogs: ()=>!(!di.getForgotPasswordToken() && !di.shouldDisplayWelcomeDialog()),
                showRenderingBlockingDialogs: ()=>{
                    const e = di.getForgotPasswordToken();
                    return e ? di.showResetPasswordDialog(e) : di.shouldDisplayWelcomeDialog() ? di.showWelcomeDialog() : void 0
                }
            }))),
            di
        }
        ));
        var pe = t(59032)
          , he = t(95793)
          , ve = t(81600);
        const be = (0,
        o.ff)([D.n9], (e=>({
            getTpaHandlers() {
                const i = async(i,t,o)=>{
                    var a, n, s;
                    const r = await e.getMemberDetails(!0);
                    return r ? (null === (a = o.appClientSpecMapData) || void 0 === a ? void 0 : a.isWixTPA) ? {
                        attributes: {
                            firstName: null !== (n = r.firstName) && void 0 !== n ? n : "",
                            lastName: null !== (s = r.lastName) && void 0 !== s ? s : "",
                            privacyStatus: r.profilePrivacyStatus
                        },
                        name: r.memberName,
                        email: r.loginEmail,
                        id: r.id,
                        owner: r.owner,
                        status: r.status
                    } : {
                        id: r.id,
                        owner: r.owner,
                        status: r.status
                    } : null
                }
                  , t = async(i,t={})=>{
                    var o, a;
                    const {member: n} = await e.promptLogin({
                        mode: t.mode,
                        modal: t.modal
                    });
                    return {
                        attributes: {
                            firstName: null !== (o = n.firstName) && void 0 !== o ? o : "",
                            lastName: null !== (a = n.lastName) && void 0 !== a ? a : "",
                            privacyStatus: n.profilePrivacyStatus
                        },
                        name: n.memberName,
                        email: n.loginEmail,
                        id: n.id,
                        owner: n.owner,
                        status: n.status
                    }
                }
                ;
                return {
                    currentMember: i,
                    smCurrentMember: i,
                    logOutCurrentMember: (0,
                    ve.u)(["site"], ((i,t)=>{
                        e.logout(null == t ? void 0 : t.url)
                    }
                    )),
                    requestLogin: (0,
                    ve.u)(["site"], t),
                    smRequestLogin: (0,
                    ve.u)(["site"], t)
                }
            }
        })))
          , Se = (0,
        o.ff)([D.n9, (0,
        o.t6)(a.$e, D.u2), r.xP], ((e,{componentIds: i},t)=>({
            name: "site-members-components",
            pageWillMount() {
                const o = i.reduce(((i,t)=>{
                    const o = e.getSocialAuthComponentProps();
                    return Object.assign(Object.assign({}, i), {
                        [t]: o
                    })
                }
                ), {});
                t.update(o)
            }
        })))
          , Ee = (0,
        o.ff)([(0,
        o.t6)(a.Wf, D.u2)], (e=>({
            handle: async i=>{
                const {shouldShowRenderingBlockingDialogs: t, showRenderingBlockingDialogs: o} = e.get();
                return t() ? (o(),
                null) : i
            }
        })))
          , Ce = e=>{
            e(D.n9, pe.j.AppWillMountHandler, pe.j.AppDidMountHandler).to(me),
            e(b.BD.BlockingDialogs).to(Ee)
        }
          , ye = e=>{
            e(he.go).to(be),
            e(pe.j.PageWillMountHandler).to(Se),
            e(pe.j.PageWillUnmountHandler).to((0,
            o.ff)([D.n9], (e=>({
                pageWillUnmount(i) {
                    return e.pageWillUnmount(i)
                }
            }))))
        }
    }
}]);
//# sourceMappingURL=https://static.parastorage.com/services/wix-thunderbolt/dist/group_8.dfa0c855.chunk.min.js.map
